#!/usr/bin/perl
use strict;
use warnings;
use 5.10.0;
use Data::Dumper;

use DBM::Deep;

# ----------------------------------------------------------------------
# kinda sorta globals
my ( $file, $db );

# ----------------------------------------------------------------------
# dispatch sub-command and print result
{
    my $cmd = shift or usage();
    usage() if $cmd eq '-h';
    usage() unless @ARGV;

    my ( $quiet, $noNL ) = ( 0, 0 );
    if ( $ARGV[0] eq '-n' ) {
        $noNL++;
        shift;
    }
    if ( $ARGV[0] eq '-q' ) {
        $quiet++;
        shift;
    }

    $file = shift or die "need has/file name\n";
    $file = _fullpath($file);

    # dispatch table
    my %dt = (
        'new'   => \&cli_new,
        'set'   => \&cli_set,
        'get'   => \&cli_get,
        'grep'  => \&cli_grep,
        'clear' => \&cli_clear,
        'dump'  => \&cli_dump,
        'lock'  => \&cli_lock,
        'unlock'  => \&cli_unlock,
    );

    die "unknown command '$cmd'" unless exists $dt{$cmd};
    if ( $cmd eq 'new' ) {
        die "hash/file '$file' exists" if -f $file;
    } else {
        die "hash/file '$file' does not exist" unless -f $file;
        cli_new($file);     # "new" and "open" are the same for DBM::Deep!
    }

    my ( $rc, $ret ) = $dt{$cmd}->(@ARGV);
    if ( $ret and not $quiet ) {
        print $ret;
        print "\n" unless $noNL;
    }
    exit $rc;
}

# ----------------------------------------------------------------------

sub cli_new {
    $db = DBM::Deep->new(
        file      => $file,
        locking   => 1,
        autoflush => 1,
        num_txns  => 2,       # else begin_work won't!
    );
    return ( 0, "" );
}

sub cli_set {
    my ( $k, $v ) = @_;

    if (defined $v) {
        $db->{$k} = $v;
    } else {
        delete $db->{$k};
    }
    return ( 0, "" );
}

sub cli_get {
    my $k = shift;

    return ( 0, $db->{$k} ) if exists $db->{$k};
    return ( 1, "" );
}

sub cli_grep {
    my ( $type, $patt ) = @_;
    my @out = ();
    die "need -k or -v" unless $type eq '-k' or $type eq '-v';

    if ( $type eq '-k' ) {
        while ( my ( $k, $v ) = each %$db ) {
            push @out, $k if $k =~ qr($patt);
        }
    }
    if ( $type eq '-v' ) {
        while ( my ( $k, $v ) = each %$db ) {
            push @out, $k if $v =~ qr($patt);
        }
    }
    return ( 0, join( "\n", @out ) ) if @out;
    return ( 1, "" );
}

sub cli_clear {
    my $patt = shift or die "need a pattern\n";

    my $c = 0;
    while ( my ( $k, $v ) = each %$db ) {
        next unless $k =~ qr($patt);
        delete $db->{$k};
        $c++;
    }
    return ( 0, $c ) if $c;
    return ( 1, 0 );
}

sub cli_dump {
    say STDERR Dumper $db->export() if $ENV{D};
    my $c = 0;
    while ( my ( $k, $v ) = each %$db ) {
        $c++;
        say "$k\t" . ( ref $v ? Dumper($v) : $v );
    }
    return ( 0, $c ) if $c;
    return ( 1, 0 );
}

sub cli_lock {
    my ($k, $pid) = @_;

    $db->lock_exclusive();

    if (exists $db->{$k}) {
        $db->unlock();
        return (1, $db->{$k});
    }

    $db->{$k} = $pid;
    $db->unlock();
    return (0, "");
}

sub cli_unlock {
    my ($k, $pid) = @_;

    $db->lock_exclusive();

    if (! exists $db->{$k}) {
        $db->unlock();
        return (1, "no such lock");
    }
    if ($pid ne $db->{$k}) {    # note string comparision
        $db->unlock();
        return (1, "lock is not yours");
    }
    delete $db->{$k};
    $db->unlock();
    return (0, "");
}

# ----------------------------------------------------------------------
# service routines

sub _fullpath {
    my $file = shift;

    # sometimes we don't come in from a shell; don't ask!
    $file =~ s/^~/$ENV{HOME}/;

    # absolute path?  no change
    return $file if $file =~ m(^/);

    # env set; use that as prefix
    return $ENV{HASHFILE_DIR} . "/$file" if $ENV{HASHFILE_DIR};

    # else just the file name as is
    return $file;
}

sub usage {

say STDERR q(
Usage:
    hashfile new   $file                # create new hashfile
    hashfile set   $file $k [$v]        # set value or delete key
    hashfile get   $file $k             # print value

    hashfile grep  $file -k|-v $pattern # grep keys or values, print matching keys

    hashfile clear $file $pattern       # delete all matching keys, print count
    hashfile dump  $file                # dump one $k<TAB>$v per line, then print count

    hashfile lock  $file $key $$        # (advisory) exclusive lock on $key, no wait
    hashfile unlock $file $key $$       # release lock

Notes:

1.  If a relative path is given, it's considered relative to $HASHFILE_DIR if
    defined, else current directory.

2.  For anything described as 'print' above, you can use '-n' or '-q' after
    the command to suppress the trailing newline, or the output itself.  (For
    the 'dump' command, this only applies to the trailing 'count'; the actual
    dump cannot be suppressed).

3.  The exit code is set (0 for 'found', 1 for 'not found') when appropriate.
    Combined with '-q', this can be very useful in shell scripts.

4.  The lock can be *easily* defeated by a bug in your code; simply delete the
    lock key!  But your programs don't have bugs, right?
);
    exit 1;
}
